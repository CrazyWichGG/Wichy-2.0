const embed = require('../embeds/embeds');


module.exports = {
    name: 'remove',
    aliases: ['rm'],
    description: '‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß',
    usage: 'remove <song index number>',
    voiceChannel: true,
    options: [
        {
            name: "number",
            description: "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß",
            type: 4,
            required: false
        }
    ],

    async execute(client, message, args) {
        const queue = client.player.nodes.get(message.guild.id);

        if (!queue || !queue.isPlaying())
            return message.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`, allowedMentions: { repliedUser: false } });


        const tracks = queue.tracks.map((track, index) => `${++index}. ${track.title}`);

        if (tracks.length < 1)
            return message.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å`, allowedMentions: { repliedUser: false } });

        if (!args[0]) {
            let nowplaying = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô : ${queue.currentTrack.title}\n\n`;
            let tracksQueue = '';

            if (tracks.length > 29) {
                tracksQueue = tracks.slice(0, 30).join('\n');
                tracksQueue += `\n‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏≠‡∏µ‡∏Å ${tracks.length - 30} ‡πÄ‡∏û‡∏•‡∏á`;
            }
            else {
                tracksQueue = tracks.join('\n');
            }

            const instruction = `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å **1** ‡∏ñ‡∏∂‡∏á **${tracks.length}** ‡πÄ‡∏û‡∏∑‡πà‡∏≠**‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å** ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠**‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å** ‚¨áÔ∏è`;
            let loopStatus = queue.repeatMode ? (queue.repeatMode === 2 ? 'All' : 'ONE') : 'Off';
            await message.reply({ content: instruction, embeds: [embed.Embed_queue("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å", nowplaying, tracksQueue, loopStatus)], allowedMentions: { repliedUser: false } });


            const collector = message.channel.createMessageCollector({
                time: 30000, // 30s
                errors: ['time'],
                filter: m => m.author.id === message.author.id
            });

            collector.on('collect', async (query) => {

                const index = parseInt(query.content);

                if (!index || index <= 0 || index > tracks.length) {
                    return message.reply({ content: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } })
                        && collector.stop();
                }

                collector.stop();
                await queue.node.remove(index - 1);

                query.reply({ content: `‚ùå ${tracks[index - 1]} ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false }});
                //query.reply({ embeds: [embed.Embed_remove("Removed Music", tracks[index - 1])], allowedMentions: { repliedUser: false } });
                return query.react('üëç');
            });

            collector.on('end', (msg, reason) => {
                if (reason === 'time')
                    return message.reply({ content: `‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } });
            });
        } else {
            const index = parseInt(args[0]);

            if (!index || index <= 0 || index > tracks.length) {
                return message.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`, allowedMentions: { repliedUser: false } });
            }

            await queue.node.remove(index - 1);
            message.reply({ content: `‚ùå ${tracks[index - 1]} ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } });
            //return message.reply({ embeds: [embed.Embed_remove("Removed Music", tracks[index - 1])], allowedMentions: { repliedUser: false } });
            return message.react('üëç');
        }
    },

    async slashExecute(client, interaction) {
        const queue = client.player.nodes.get(interaction.guild.id);
        const number = interaction.options.getInteger('number');

        if (!queue || !queue.isPlaying())
            return interaction.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ`, allowedMentions: { repliedUser: false } });


        const tracks = queue.tracks.map((track, index) => `${++index}. ${track.title}`);

        if (tracks.length < 1)
            return interaction.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å`, allowedMentions: { repliedUser: false } });

        if (!number) {
            let nowplaying = `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡πà‡∏ô : ${queue.currentTrack.title}\n\n`;
            let tracksQueue = '';

            if (tracks.length > 29) {
                tracksQueue = tracks.slice(0, 30).join('\n');
                tracksQueue += `\n‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ‡∏≠‡∏µ‡∏Å ${tracks.length - 30} ‡πÄ‡∏û‡∏•‡∏á`;
            }
            else {
                tracksQueue = tracks.join('\n');
            }

            const instruction = `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å **1** ‡∏ñ‡∏∂‡∏á **${tracks.length}** ‡πÄ‡∏û‡∏∑‡πà‡∏≠**‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å** ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠**‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å** ‚¨áÔ∏è`;
            let loopStatus = queue.repeatMode ? (queue.repeatMode === 2 ? 'All' : 'ONE') : 'Off';
            await interaction.reply({ content: instruction, embeds: [embed.Embed_queue("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å", nowplaying, tracksQueue, loopStatus)], allowedMentions: { repliedUser: false } });


            const collector = interaction.channel.createMessageCollector({
                time: 30000, // 30s
                errors: ['time'],
                filter: m => m.author.id === interaction.user.id
            });

            collector.on('collect', async (query) => {
                const index = parseInt(query.content);

                if (!index || index <= 0 || index > tracks.length) {
                    return query.reply({ content: `‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } })
                        && collector.stop();
                }

                collector.stop();
                await queue.node.remove(index - 1);

                query.reply({ content: `‚ùå ${tracks[index - 1]} ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false }})
                //query.reply({ embeds: [embed.Embed_remove("Removed Music", tracks[index - 1])], allowedMentions: { repliedUser: false } });
                return query.react('üëç');
            });

            collector.on('end', (msg, reason) => {
                if (reason === 'time')
                    return interaction.reply({ content: `‚ùå ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } });
            });
        } else {

            if (!number || number <= 0 || number > tracks.length) {
                return interaction.reply({ content: `‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡πÉ‡∏ô‡∏Ñ‡∏¥‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`, allowedMentions: { repliedUser: false } });
            }

            await queue.node.remove(number - 1);
            return interaction.reply({ content: `‚ùå ${tracks[number - 1]} ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß`, allowedMentions: { repliedUser: false } });
            //return interaction.reply({ embeds: [embed.Embed_remove("Removed Music", tracks[number - 1])], allowedMentions: { repliedUser: false } });
        }
    },
};